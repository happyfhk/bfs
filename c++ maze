// 처음에 n x m의 크기의 미로를 생성하게 됨 0 1로 입력 0은 길, 1은 벽
// 자신이 길을 직접 만들 수 있음
// 최단 거리로 이동하게 만들고 도달 못하면 따로 문자 출력
// 만들고 그래픽 구현

#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

int n, m, dx[4]={-1,1,0,0}, dy[4]={0,0,-1,1};
pair<int,int> way[101][101];
bool visited[101][101];

void bfs(vector<vector<int>>&maze){
    int dp[n][m];
    queue<pair<int,int>> q;
    q.push({0,0});

    while(!q.empty()){
        int y=q.front().first;
        int x=q.front().second;
        q.pop();

        if(y==n-1&&x==m-1){
            cout << "미로를 " << dp[y][x] << "칸 이동하여 탈출했습니다" << '\n';
            break;
        }

        for(int i=0; i<4; i++){
            int nx=x+dx[i];
            int ny=y+dy[i];

            if(nx<0||ny<0||nx>=m||ny>=n) continue;

            if(maze[ny][nx]==0&&!visited[ny][nx]){
                visited[ny][nx]=true;
                dp[ny][nx]=dp[y][x]+1;
                q.push({ny,nx});
                way[ny][nx]={y,x};
            }
        }
    }

    if(!visited[n-1][m-1]){
        cout << "탈출할 수 없습니다." << '\n';
    } else {
        vector<pair<int,int>> path;
        int x=m-1, y=n-1;
        path.push_back({y,x});

        while(!(x==0&&y==0)){
            path.push_back({y,x});
            auto set=way[y][x];

            y=set.first;
            x=set.second;
        }
        path.push_back({0,0});
        
        reverse(path.begin(),path.end());

        for(auto xy:path){
            cout << "(" << xy.second << ", " << xy.first << ")" << '\n';
        }
    }
    return;
}

int main(){
    ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);

    cin >> n >> m;

    vector<vector<int>> maze(n, vector<int>(m,0));

    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            cin >> maze[i][j];
        }
    }
    bfs(maze);

    return 0;
}